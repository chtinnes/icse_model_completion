t # 26
e 0 6 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_fZDzyt6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/Ecore','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@628bed18 (key: constraints, value: spec)'],'eModelElement':'isDistinguishableFrom'}}" "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_fZDzy96tEei97MD7GK1RmA', 'key':'constraints','value':'spec'}}"
e 5 0 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_fZDzx96tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@2d2d3a79 (source: http://www.eclipse.org/emf/2002/GenModel)','org.eclipse.emf.ecore.impl.EAnnotationImpl@2c44464a (source: http://www.eclipse.org/emf/2002/Ecore)'],'name':'isDistinguishableFrom','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'EBoolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@26b1edc2 (expression: EBoolean)','eContainingClass':'NamedElement','eParameters':['n','ns']}}" _
e 5 1 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" _ "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_fZDzyN6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@28d3c72 (key: documentation, value: The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have unrelated types or (b) they have related types but different names.\\r\\nresult = if self.oclIsKindOf(n.oclType) or n.oclIsKindOf(self.oclType)\\nthen ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty()\\nelse true\\nendif)'],'eModelElement':'isDistinguishableFrom'}}"
e 1 2 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" _ "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_fZDzyd6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have unrelated types or'}}"
e 5 4 "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" _ "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_ffDHsN6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@62ea6ff0 (key: documentation, value: The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have unrelated types or (b) they have related types but different names.\\nresult = if self.oclIsKindOf(n.oclType) or n.oclIsKindOf(self.oclType)\\nthen ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty()\\nelse true\\nendif)'],'eModelElement':'isDistinguishableFrom'}}"
$$
e 4 3 "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" _ "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_ffDHsd6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have unrelated types or'}}"
