t # 93
e 0 2 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_fZD2BN6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/Ecore','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@7a16378 (key: constraints, value: spec)'],'eModelElement':'isConsistentWith'}}" "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_fZD2Bd6tEei97MD7GK1RmA', 'key':'constraints','value':'spec'}}"
e 1 5 "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_ffDKM96tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@232aff05 (key: documentation, value: The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent in the sense of maintaining type covariance. Other senses of consistency may be required, for example to determine consistency in the sense of contravariance. Users may define alternative queries under names different from 'isConsistentWith()', as for example, users may define a query named 'isContravariantWith()'.\\nA redefining operation is consistent with a redefined operation if it has the same number of owned parameters, and the type of each owned parameter conforms to the type of the corresponding redefined parameter.\\nresult = redefinee.oclIsKindOf(Operation) and\\nlet op : Operation = redefinee.oclAsType(Operation) in\\n\\tself.ownedParameter->size() = op.ownedParameter->size() and\\n\\tSequence{1..self.ownedParameter->size()}->\\n\\t\\tforAll(i |op.ownedParameter->at(1).type.conformsTo(self.ownedParameter->at(i).type))\\nredefinee.isRedefinitionContextValid(self))'],'eModelElement':'isConsistentWith'}}" "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_ffDKNN6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent in the sense of maintaining type covariance. Oth'}}"
e 3 1 "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_fZD2Ad6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@20df6f1d (source: http://www.eclipse.org/emf/2002/GenModel)','org.eclipse.emf.ecore.impl.EAnnotationImpl@329029b6 (source: http://www.eclipse.org/emf/2002/Ecore)','...'],'name':'isConsistentWith','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'EBoolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@17891211 (expression: EBoolean)','eParameters':['redefinee']}}" _
e 3 4 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" _ "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_fZD2At6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@67f58d49 (key: documentation, value: The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent in the sense of maintaining type covariance. Other senses of consistency may be required, for example to determine consistency in the sense of contravariance. Users may define alternative queries under names different from 'isConsistentWith()', as for example, users may define a query named 'isContravariantWith()'.\\r\\nredefinee.isRedefinitionContextValid(self)\\r\\nresult = (redefinee.oclIsKindOf(Operation) and\\n    let op: Operation = redefinee.oclAsType(Operation) in\\n        self.formalParameter.size() = op.formalParameter.size() and\\n        self.returnResult.size() = op.returnResult.size() and\\n        forAll(i | op.formalParameter[i].type.conformsTo(self.formalParameter[i].type)) and\\n        forAll(i | op.returnResult[i].type.conformsTo(self.returnResult[i].type))\\n))'],'eModelElement':'isConsistentWith'}}"
e 4 6 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" _ "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_fZD2A96tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent in the sense of maintaining type covariance. Oth'}}"
$$
e 3 0 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" _ _
