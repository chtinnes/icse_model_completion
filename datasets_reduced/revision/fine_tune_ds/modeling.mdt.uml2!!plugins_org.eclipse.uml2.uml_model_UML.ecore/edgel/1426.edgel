t # 1426
e 4 1 "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_f3T1396tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@3ca52734 (source: http://www.eclipse.org/emf/2002/GenModel)'],'name':'has_qualified_name','ordered':'true','unique':'true','lowerBound':'0','upperBound':'1','many':'false','required':'false','eType':'EBoolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@68e54e4c (expression: EBoolean)','eContainingClass':'NamedElement','eParameters':['diagnostics','context']}}" "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_wIFYed6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@aafceea (key: documentation, value: When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.\\n(self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()) implies\\n  self.qualifiedName = self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result)))'],'eModelElement':'has_qualified_name'}}"
e 4 3 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" _ "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_f3T14N6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@57191883 (key: documentation, value: When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.\\r\\n(self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()) implies\\n  self.qualifiedName = self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result)))'],'eModelElement':'has_qualified_name'}}"
e 3 2 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" _ "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_f3T14d6tEei97MD7GK1RmA', 'key':'documentation','value':'When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.\\r\\n(self.name->notEmpty() and self.allNamespaces()-'}}"
$$
e 1 0 "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" _ "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_wIFYet6tEei97MD7GK1RmA', 'key':'documentation','value':'When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.\\n(self.name->notEmpty() and self.allNamespaces()->'}}"
