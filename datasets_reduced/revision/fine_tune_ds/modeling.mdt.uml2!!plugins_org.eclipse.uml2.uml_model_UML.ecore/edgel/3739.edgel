t # 3739
e 3 0 "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_07Rey96tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@625f14e5 (key: documentation, value: The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent with a redefined property if the type of the redefining property conforms to the type of the redefined property, the multiplicity of the redefining property (if specified) is contained in the multiplicity of the redefined property.\\nThe query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent with a redefined property if the type of the redefining property conforms to the type of the redefined property, and the multiplicity of the redefining property (if specified) is contained in the multiplicity of the redefined property.\\nredefinee.isRedefinitionContextValid(self)\\nresult = redefinee.oclIsKindOf(Property) and \\n  let prop : Property = redefinee.oclAsType(Property) in \\n  (prop.type.conformsTo(self.type) and \\n  ((prop.lowerBound()->notEmpty() and self.lowerBound()->notEmpty()) implies prop.lowerBound() >= self.lowerBound()) and \\n  ((prop.upperBound()->notEmpty() and self.upperBound()->notEmpty()) implies prop.lowerBound() <= self.lowerBound()) and \\n  (self.isComposite implies prop.isComposite))\\n<p>From package UML (URI {@literal http://www.omg.org/spec/UML/20110701}).</p>)'],'eModelElement':'isConsistentWith'}}" "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_07RezN6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent w'}}"
e 4 3 "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_ftf3AN6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@2acf08a9 (source: http://www.eclipse.org/emf/2002/GenModel)','org.eclipse.emf.ecore.impl.EAnnotationImpl@36133b56 (source: redefines)'],'name':'isConsistentWith','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'Boolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@443affae (expression: Boolean)','eParameters':['redefinee']}}" _
e 1 2 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_0oByq96tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@6fc53b22 (key: documentation, value: The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent with a redefined property if the type of the redefining property conforms to the type of the redefined property, the multiplicity of the redefining property (if specified) is contained in the multiplicity of the redefined property.\\nThe query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent with a redefined property if the type of the redefining property conforms to the type of the redefined property, and the multiplicity of the redefining property (if specified) is contained in the multiplicity of the redefined property.\\nredefinee.isRedefinitionContextValid(self)\\nresult = redefinee.oclIsKindOf(Property) and \\n  let prop : Property = redefinee.oclAsType(Property) in \\n  (prop.type.conformsTo(self.type) and \\n  ((prop.lowerBound()->notEmpty() and self.lowerBound()->notEmpty()) implies prop.lowerBound() >= self.lowerBound()) and \\n  ((prop.upperBound()->notEmpty() and self.upperBound()->notEmpty()) implies prop.lowerBound() <= self.lowerBound()) and \\n  (self.isComposite implies prop.isComposite))\\n<p>Merged from package UML (URI {@literal http://www.omg.org/spec/UML/20110701}).</p>)'],'eModelElement':'isConsistentWith'}}" "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_0oByrN6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent w'}}"
$$
e 4 1 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" _ _
