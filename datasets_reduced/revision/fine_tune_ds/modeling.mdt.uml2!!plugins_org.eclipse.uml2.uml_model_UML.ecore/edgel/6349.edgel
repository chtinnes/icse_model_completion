t # 6349
e 0 3 "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_fthCR96tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@14921fe (source: http://www.eclipse.org/emf/2002/GenModel)'],'name':'types_of_parameters','ordered':'true','unique':'true','lowerBound':'0','upperBound':'1','many':'false','required':'false','eType':'EBoolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@2eff9876 (expression: EBoolean)','eContainingClass':'FunctionBehavior','eParameters':['diagnostics','context']}}" "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_1u9fMd6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@2d9fdc26 (key: documentation, value: The types of the ownedParameters are all DataTypes, which may not nest anything but other DataTypes.\\nownedParameter->forAll(p | p.type <> null and\\r\\n  p.type.oclIsTypeOf(DataType) and hasAllDataTypeAttributes(p.type.oclAsType(DataType))))'],'eModelElement':'types_of_parameters'}}"
e 3 4 "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" _ "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_1u9fMt6tEei97MD7GK1RmA', 'key':'documentation','value':'The types of the ownedParameters are all DataTypes, which may not nest anything but other DataTypes.\\nownedParameter->forAll(p | p.type <> null and\\r\\n  p.type.oclIsTypeOf(DataType) and hasAllDataTypeAtt'}}"
e 2 1 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_wIH-yt6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@23f700f1 (key: documentation, value: The types of parameters are all data types, which may not nest anything but other datatypes.\\ndef: hasAllDataTypeAttributes(d : DataType) : Boolean =\\n  d.ownedAttribute->forAll(a |\\n    a.type.oclIsTypeOf(DataType) and\\n      hasAllDataTypeAttributes(a.type))\\nself.ownedParameters->forAll(p | p.type.notEmpty() and\\n  p.oclIsTypeOf(DataType) and hasAllDataTypeAttributes(p)))'],'eModelElement':'types_of_parameters'}}" "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_wIH-y96tEei97MD7GK1RmA', 'key':'documentation','value':'The types of parameters are all data types, which may not nest anything but other datatypes.\\ndef: hasAllDataTypeAttributes(d : DataType) : Boolean =\\n  d.ownedAttribute->forAll(a |\\n    a.type.oclIsType'}}"
$$
e 0 2 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" _ _
