t # 6836
e 2 1 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_1u0fyd6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@1d2c2274 (key: documentation, value: The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent. A redefining operation is consistent with a redefined operation if\\r\\nit has the same number of owned parameters, and for each parameter the following holds:\\r\\n\\r\\n- Direction, ordering and uniqueness are the same.\\r\\n- The corresponding types are covariant, contravariant or invariant.\\r\\n- The multiplicities are compatible, depending on the parameter direction.\\nresult = (redefiningElement.oclIsKindOf(Operation) and\\r\\nlet op : Operation = redefiningElement.oclAsType(Operation) in\\r\\n\\tself.ownedParameter->size() = op.ownedParameter->size() and\\r\\n\\tSequence{1..self.ownedParameter->size()}->\\r\\n\\t\\tforAll(i |  \\r\\n\\t\\t  let redefiningParam : Parameter = op.ownedParameter->at(i),\\r\\n               redefinedParam : Parameter = self.ownedParameter->at(i) in\\r\\n                 (redefiningParam.isUnique = redefinedParam.isUnique) and\\r\\n                 (redefiningParam.isOrdered = redefinedParam. isOrdered) and\\r\\n                 (redefiningParam.direction = redefinedParam.direction) and\\r\\n                 (redefiningParam.type.conformsTo(redefinedParam.type) or\\r\\n                     redefinedParam.type.conformsTo(redefiningParam.type)) and\\r\\n                 (redefiningParam.direction = ParameterDirectionKind::inout implies\\r\\n                         (redefinedParam.compatibleWith(redefiningParam) and\\r\\n                         redefiningParam.compatibleWith(redefinedParam))) and\\r\\n                 (redefiningParam.direction = ParameterDirectionKind::_'in' implies\\r\\n                         redefinedParam.compatibleWith(redefiningParam)) and\\r\\n                 ((redefiningParam.direction = ParameterDirectionKind::out or\\r\\n                      redefiningParam.direction = ParameterDirectionKind::return) implies\\r\\n                         redefiningParam.compatibleWith(redefinedParam))\\r\\n\\t\\t))\\nredefiningElement.isRedefinitionContextValid(self)\\n<p>From package UML::Classification.</p>)'],'eModelElement':'isConsistentWith'}}" "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_1u0fyt6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent. A redefining operation is consistent with a red'}}"
e 3 2 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_ftgZwN6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@3c68c116 (source: http://www.eclipse.org/emf/2002/GenModel)','org.eclipse.emf.ecore.impl.EAnnotationImpl@1dcb870c (source: redefines)'],'name':'isConsistentWith','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'Boolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@58ecb1dd (expression: Boolean)','eParameters':['redefiningElement']}}" _
e 3 4 "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" _ "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_4pe6UN6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@126261bf (key: documentation, value: The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent. A redefining operation is consistent with a redefined operation if\\r\\nit has the same number of owned parameters, and for each parameter the following holds:\\r\\n\\r\\n- Direction, ordering and uniqueness are the same.\\r\\n- The corresponding types are covariant, contravariant or invariant.\\r\\n- The multiplicities are compatible, depending on the parameter direction.\\nredefiningElement.isRedefinitionContextValid(self)\\nresult = (redefiningElement.oclIsKindOf(Operation) and\\r\\nlet op : Operation = redefiningElement.oclAsType(Operation) in\\r\\n\\tself.ownedParameter->size() = op.ownedParameter->size() and\\r\\n\\tSequence{1..self.ownedParameter->size()}->\\r\\n\\t\\tforAll(i |  \\r\\n\\t\\t  let redefiningParam : Parameter = op.ownedParameter->at(i),\\r\\n               redefinedParam : Parameter = self.ownedParameter->at(i) in\\r\\n                 (redefiningParam.isUnique = redefinedParam.isUnique) and\\r\\n                 (redefiningParam.isOrdered = redefinedParam. isOrdered) and\\r\\n                 (redefiningParam.direction = redefinedParam.direction) and\\r\\n                 (redefiningParam.type.conformsTo(redefinedParam.type) or\\r\\n                     redefinedParam.type.conformsTo(redefiningParam.type)) and\\r\\n                 (redefiningParam.direction = ParameterDirectionKind::inout implies\\r\\n                         (redefinedParam.compatibleWith(redefiningParam) and\\r\\n                         redefiningParam.compatibleWith(redefinedParam))) and\\r\\n                 (redefiningParam.direction = ParameterDirectionKind::_'in' implies\\r\\n                         redefinedParam.compatibleWith(redefiningParam)) and\\r\\n                 ((redefiningParam.direction = ParameterDirectionKind::out or\\r\\n                      redefiningParam.direction = ParameterDirectionKind::return) implies\\r\\n                         redefiningParam.compatibleWith(redefinedParam))\\r\\n\\t\\t))\\n<p>From package UML::Classification.</p>)'],'eModelElement':'isConsistentWith'}}"
$$
e 4 0 "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" _ "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_4pe6Ud6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent. A redefining operation is consistent with a red'}}"
