t # 3524
e 0 3 "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_2ZAELd6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@5950c19f (key: documentation, value: The ActivityEdges incoming to and outgoing from a MergeNode must be either all ObjectFlows or all ControlFlows.\\nlet allEdges : Set(ActivityEdge) = incoming->union(outgoing) in\\r\\nallEdges->forAll(oclIsKindOf(ControlFlow)) or allEdges->forAll(oclIsKindOf(ObjectFlow)))'],'eModelElement':'edges'}}" "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_2ZAELt6tEei97MD7GK1RmA', 'key':'documentation','value':'The ActivityEdges incoming to and outgoing from a MergeNode must be either all ObjectFlows or all ControlFlows.\\nlet allEdges : Set(ActivityEdge) = incoming->union(outgoing) in\\r\\nallEdges->forAll(oclIsK'}}"
e 4 0 "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_ftjeId6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@bb63d94 (source: http://www.eclipse.org/emf/2002/GenModel)'],'name':'edges','ordered':'true','unique':'true','lowerBound':'0','upperBound':'1','many':'false','required':'false','eType':'EBoolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@4b9a8deb (expression: EBoolean)','eContainingClass':'MergeNode','eParameters':['diagnostics','context']}}" _
e 1 2 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_1u9e896tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@392de7d9 (key: documentation, value: The ActivityEdges incoming to and outgoing from a MergeNode must be either all ObjectFlows or all ControlFlows.\\nlet allEdges : Set(ActivityEdge) = incoming->union(outgoing) in\\r\\nallEdges->forAll(oclIsKindOf(ControlFlow)) or allEdges->forAll(oclIsKindOf(ObjectFlow))\\r\\n)'],'eModelElement':'edges'}}" "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_1u9e9N6tEei97MD7GK1RmA', 'key':'documentation','value':'The ActivityEdges incoming to and outgoing from a MergeNode must be either all ObjectFlows or all ControlFlows.\\nlet allEdges : Set(ActivityEdge) = incoming->union(outgoing) in\\r\\nallEdges->forAll(oclIsK'}}"
$$
e 4 1 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" _ _
