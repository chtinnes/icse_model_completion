t # 4719
e 3 0 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_nsWozd6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@4283222c (key: documentation, value: A state models a situation during which some (usually implicit) invariant condition holds. The invariant may represent a static situation such as an object waiting for some external event to occur. However, it can also model dynamic conditions such as the process of performing some behavior (i.e., the model element under consideration enters the state when the behavior commences and leaves it as soon as the behavior is completed). The following kinds of states are distinguished:\\n\\no Simple state,\\n\\no composite state, and\\n\\no submachine state.\\n\\nA composite state is either a simple composite state (with just one region) or an orthogonal state (with more than one region).\\n\\n\\n\\nSimple state\\n\\nA simple state is a state that does not have substates, i.e. it has no regions and it has no submachine state machine.\\n\\n\\n\\nComposite state\\n\\nA composite state either contains one region or is decomposed into two or more orthogonal regions. Each region has a set of mutually exclusive disjoint subvertices and a set of transitions. A given state may only be decomposed in one of these two ways. \\n\\nAny state enclosed within a region of a composite state is called a substate of that composite state. It is called a direct substate when it is not contained by any other state; otherwise it is referred to as a indirect substate. \\n\\nEach region of a composite state may have an initial pseudostate and a final state. A transition to the enclosing state represents a transition to the initial pseudostate in each region. A newly-created object takes it's topmost default transitions, originating from the topmost initial pseudostates of each region.\\n\\n\\n\\nA transition to a final state represents the completion of behavior in the enclosing region. Completion of behavior in all orthogonal regions represents completion of behavior by the enclosing state and triggers a completion event on the enclosing state. Completion of the topmost regions of an object corresponds to its termination.\\n\\n\\n\\nAn entry pseudostate is used to join an external transition terminating on that entry point to an internal transition emanating from that entry point. An exit pseudostate is used to join an internal transition terminating on that exit point to an external transition emanating from that exit point. The main purpose of such entry and exit points is to execute the state entry and exit actions respectively in between the actions that are associated with the joined transitions.\\n\\n\\n\\nSemantic variation point (default entry rule)\\n\\nIf a transition terminates on an enclosing state and the enclosed regions do not have an initial pseudostate, the interpretation of this situation is a semantic variation point. In some interpretations, this is considered an ill-formed model. That is, in those cases the initial pseudostate is mandatory. \\n\\nAn alternative interpretation allows this situation and it means that, when such a transition is taken, the state machine stays in the composite state, without entering any of the regions or their substates.\\n\\n\\n\\nSubmachine state\\n\\nA submachine state specifies the insertion of the specification of a submachine state machine. The state machine that contains the submachine state is called the containing state machine. The same state machine may be a submachine more than once in the context of a single containing state machine.\\n\\n\\n\\nA submachine state is semantically equivalent to a composite state. The regions of the submachine state machine are the regions of the composite state. The entry, exit and behavior actions, and internal transitions, are defined as part of the state. Submachine state is a decomposition mechanism that allows factoring of common behaviors and their reuse.\\n\\nTransitions in the containing state machine can have entry/exit points of the inserted state machine as targets/sources.\\n\\n\\r\\nThe states of protocol state machines are exposed to the users of their context classifiers. A protocol state represents an exposed stable situation of its context classifier: when an instance of the classifier is not processing any operation, users of this instance can always know its state configuration.)'],'eModelElement':'State'}}" "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_nsWozt6tEei97MD7GK1RmA', 'key':'documentation','value':'A state models a situation during which some (usually implicit) invariant condition holds. The invariant may represent a static situation such as an object waiting for some external event to occur. Ho'}}"
e 1 2 "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" "{'changeType': 'Preserve', 'type': 'object', 'className': 'EClass', 'attributes': {'id': '_ftgctt6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@3983bf95 (source: http://www.eclipse.org/emf/2002/GenModel)','org.eclipse.emf.ecore.impl.EAnnotationImpl@2024f0e3 (source: duplicates)'],'name':'State','ePackage':'uml','abstract':'false','interface':'false','eOperations':['submachine_states','destinations_or_sources_of_transitions','submachine_or_regions','composite_states','entry_or_exit','isSimple','isComposite','isOrthogonal','isSubmachineState','redefinitionContext','...'],'eIDAttribute':'name','eStructuralFeatures':['isComposite','isOrthogonal','isSimple','isSubmachineState','submachine','connection','connectionPoint','redefinedState','stateInvariant','entry','exit','doActivity','deferrableTrigger','region'],'eGenericSuperTypes':['org.eclipse.emf.ecore.impl.EGenericTypeImpl@7af03178 (expression: Namespace)','org.eclipse.emf.ecore.impl.EGenericTypeImpl@2eb98f90 (expression: RedefinableElement)','org.eclipse.emf.ecore.impl.EGenericTypeImpl@665278b8 (expression: Vertex)']}}" "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_n2YHfd6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@1c74df1d (key: documentation, value: A state models a situation during which some (usually implicit) invariant condition holds. The invariant may represent a static situation such as an object waiting for some external event to occur. However, it can also model dynamic conditions such as the process of performing some behavior (i.e., the model element under consideration enters the state when the behavior commences and leaves it as soon as the behavior is completed). The following kinds of states are distinguished:\\r\\no Simple state,\\r\\no composite state, and\\r\\no submachine state.\\r\\nA composite state is either a simple composite state (with just one region) or an orthogonal state (with more than one region).\\r\\n\\r\\nSimple state\\r\\nA simple state is a state that does not have substates, i.e. it has no regions and it has no submachine state machine.\\r\\n\\r\\nComposite state\\r\\nA composite state either contains one region or is decomposed into two or more orthogonal regions. Each region has a set of mutually exclusive disjoint subvertices and a set of transitions. A given state may only be decomposed in one of these two ways. \\r\\nAny state enclosed within a region of a composite state is called a substate of that composite state. It is called a direct substate when it is not contained by any other state; otherwise it is referred to as a indirect substate. \\r\\nEach region of a composite state may have an initial pseudostate and a final state. A transition to the enclosing state represents a transition to the initial pseudostate in each region. A newly-created object takes it's topmost default transitions, originating from the topmost initial pseudostates of each region.\\r\\n\\r\\nA transition to a final state represents the completion of behavior in the enclosing region. Completion of behavior in all orthogonal regions represents completion of behavior by the enclosing state and triggers a completion event on the enclosing state. Completion of the topmost regions of an object corresponds to its termination.\\r\\n\\r\\nAn entry pseudostate is used to join an external transition terminating on that entry point to an internal transition emanating from that entry point. An exit pseudostate is used to join an internal transition terminating on that exit point to an external transition emanating from that exit point. The main purpose of such entry and exit points is to execute the state entry and exit actions respectively in between the actions that are associated with the joined transitions.\\r\\n\\r\\nSemantic variation point (default entry rule)\\r\\nIf a transition terminates on an enclosing state and the enclosed regions do not have an initial pseudostate, the interpretation of this situation is a semantic variation point. In some interpretations, this is considered an ill-formed model. That is, in those cases the initial pseudostate is mandatory. \\r\\nAn alternative interpretation allows this situation and it means that, when such a transition is taken, the state machine stays in the composite state, without entering any of the regions or their substates.\\r\\n\\r\\nSubmachine state\\r\\nA submachine state specifies the insertion of the specification of a submachine state machine. The state machine that contains the submachine state is called the containing state machine. The same state machine may be a submachine more than once in the context of a single containing state machine.\\r\\n\\r\\nA submachine state is semantically equivalent to a composite state. The regions of the submachine state machine are the regions of the composite state. The entry, exit and behavior actions, and internal transitions, are defined as part of the state. Submachine state is a decomposition mechanism that allows factoring of common behaviors and their reuse.\\r\\nTransitions in the containing state machine can have entry/exit points of the inserted state machine as targets/sources.\\r\\n\\r\\nThe states of protocol state machines are exposed to the users of their context classifiers. A protocol state represents an exposed stable situation of its context classifier: when an instance of the classifier is not processing any operation, users of this instance can always know its state configuration.)'],'eModelElement':'State'}}"
e 2 4 "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" _ "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_n2YHft6tEei97MD7GK1RmA', 'key':'documentation','value':'A state models a situation during which some (usually implicit) invariant condition holds. The invariant may represent a static situation such as an object waiting for some external event to occur. Ho'}}"
$$
e 1 3 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" _ _
