t # 5620
e 4 0 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_ftgdj96tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@25944ef (source: http://www.eclipse.org/emf/2002/GenModel)'],'name':'transitions_incoming','ordered':'true','unique':'true','lowerBound':'0','upperBound':'1','many':'false','required':'false','eType':'EBoolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@65550744 (expression: EBoolean)','eContainingClass':'Pseudostate','eParameters':['diagnostics','context']}}" "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_wIGmqN6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@6fe74f53 (key: documentation, value: All transitions incoming a join vertex must originate in different regions of an orthogonal state.\\n(self.kind = #join) implies\\n  self.incoming->forAll (t1, t2 | t1<>t2 implies\\n    (self.stateMachine.LCA(t1.source, t2.source).container.isOrthogonal)))'],'eModelElement':'transitions_incoming'}}"
e 4 1 "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" _ "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_1u0jKN6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@7b8755df (key: documentation, value: All Transitions incoming a join Vertex must originate in different Regions of an orthogonal State.\\n(kind = PseudostateKind::join) implies\\n\\n-- for any pair of incoming transitions there exists an orthogonal state which contains the source vetices of these transitions \\n-- such that these source vertices belong to different regions of that orthogonal state \\n\\nincoming->forAll(t1:Transition, t2:Transition | let contState:State = containingStateMachine().LCAState(t1.source, t2.source) in\\n\\t((contState <> null) and (contState.region\\n\\t\\t->exists(r1:Region, r2: Region | (r1 <> r2) and t1.source.isContainedInRegion(r1) and t2.source.isContainedInRegion(r2))))))'],'eModelElement':'transitions_incoming'}}"
e 1 3 "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" _ "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_1u0jKd6tEei97MD7GK1RmA', 'key':'documentation','value':'All Transitions incoming a join Vertex must originate in different Regions of an orthogonal State.\\n(kind = PseudostateKind::join) implies\\n\\n-- for any pair of incoming transitions there exists an ortho'}}"
$$
e 0 2 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" _ "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_wIGmqd6tEei97MD7GK1RmA', 'key':'documentation','value':'All transitions incoming a join vertex must originate in different regions of an orthogonal state.\\n(self.kind = #join) implies\\n  self.incoming->forAll (t1, t2 | t1<>t2 implies\\n    (self.stateMachine.L'}}"
