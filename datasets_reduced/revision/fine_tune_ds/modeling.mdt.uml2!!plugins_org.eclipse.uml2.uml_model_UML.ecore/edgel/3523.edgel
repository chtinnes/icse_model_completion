t # 3523
e 0 3 "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_ftjd_d6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@36aa3b1b (source: http://www.eclipse.org/emf/2002/GenModel)'],'name':'edges','ordered':'true','unique':'true','lowerBound':'0','upperBound':'1','many':'false','required':'false','eType':'EBoolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@15fd6522 (expression: EBoolean)','eContainingClass':'ForkNode','eParameters':['diagnostics','context']}}" "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_2ZADut6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@17a89d21 (key: documentation, value: The ActivityEdges incoming to and outgoing from a ForkNode must be either all ObjectFlows or all ControlFlows.\\nlet allEdges : Set(ActivityEdge) = incoming->union(outgoing) in\\r\\nallEdges->forAll(oclIsKindOf(ControlFlow)) or allEdges->forAll(oclIsKindOf(ObjectFlow)))'],'eModelElement':'edges'}}"
e 3 4 "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" _ "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_2ZADu96tEei97MD7GK1RmA', 'key':'documentation','value':'The ActivityEdges incoming to and outgoing from a ForkNode must be either all ObjectFlows or all ControlFlows.\\nlet allEdges : Set(ActivityEdge) = incoming->union(outgoing) in\\r\\nallEdges->forAll(oclIsKi'}}"
e 1 2 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_1u9egN6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@7b21a198 (key: documentation, value: The ActivityEdges incoming to and outgoing from a ForkNode must be either all ObjectFlows or all ControlFlows.\\nlet allEdges : Set(ActivityEdge) = incoming->union(outgoing) in\\r\\nallEdges->forAll(oclIsKindOf(ControlFlow)) or allEdges->forAll(oclIsKindOf(ObjectFlow))\\r\\n)'],'eModelElement':'edges'}}" "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_1u9egd6tEei97MD7GK1RmA', 'key':'documentation','value':'The ActivityEdges incoming to and outgoing from a ForkNode must be either all ObjectFlows or all ControlFlows.\\nlet allEdges : Set(ActivityEdge) = incoming->union(outgoing) in\\r\\nallEdges->forAll(oclIsKi'}}"
$$
e 0 1 "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" _ _
