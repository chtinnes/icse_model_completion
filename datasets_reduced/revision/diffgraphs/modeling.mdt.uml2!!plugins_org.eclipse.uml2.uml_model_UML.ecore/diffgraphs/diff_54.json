{"directed": true, "multigraph": false, "graph": {}, 
  "nodes": [{
	 "id": "0", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oBpaBd6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@27c6762c (key: documentation, value: The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible.\\r\\nresult = (ownedMember->includes(el)) or\\n(elementImport->select(ei|ei.importedElement = #public)->collect(ei|ei.importedElement)->includes(el)) or\\n(packageImport->select(pi|pi.visibility = #public)->collect(pi|pi.importedPackage.member->includes(el))->notEmpty()))'],'eModelElement':'makesVisible'}}" 
},{
	 "id": "1", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oBpaBt6tEei97MD7GK1RmA', 'key':'documentation','value':'The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible.\\r\\nresult = (ownedMember->in'}}" 
},{
	 "id": "2", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oBpcCd6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@2c86fa49 (key: documentation, value: The query inheritableMembers() gives all of the members of a classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.\\r\\nresult = member->select(m | c.hasVisibilityOf(m)))'],'eModelElement':'inheritableMembers'}}" 
},{
	 "id": "3", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oBpcCt6tEei97MD7GK1RmA', 'key':'documentation','value':'The query inheritableMembers() gives all of the members of a classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.\\r\\nresult = member->select(m |'}}" 
},{
	 "id": "4", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oBpcDd6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@374d52a8 (key: documentation, value: The query hasVisibilityOf() determines whether a named element is visible in the classifier. By default all are visible. It is only called when the argument is something owned by a parent.\\r\\nresult = if (self.inheritedMember->includes(n)) then (n.visibility <> #private) else true)'],'eModelElement':'hasVisibilityOf'}}" 
},{
	 "id": "5", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oBpcDt6tEei97MD7GK1RmA', 'key':'documentation','value':'The query hasVisibilityOf() determines whether a named element is visible in the classifier. By default all are visible. It is only called when the argument is something owned by a parent.\\r\\nresult = i'}}" 
},{
	 "id": "6", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oBpcZt6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@24d5f8c1 (key: documentation, value: The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions.\\r\\nresult = false)'],'eModelElement':'isConsistentWith'}}" 
},{
	 "id": "7", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oBpcZ96tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; t'}}" 
},{
	 "id": "8", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oBpdeN6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@6ec3c601 (key: documentation, value: The query value() gives an integer value for an expression intended to produce one.\\r\\ntrue)'],'eModelElement':'value'}}" 
},{
	 "id": "9", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oBpded6tEei97MD7GK1RmA', 'key':'documentation','value':'The query value() gives an integer value for an expression intended to produce one.\\r\\ntrue'}}" 
},{
	 "id": "10", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oBpdft6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@2e680072 (key: documentation, value: The query isPositive() tells whether an integer expression has a positive value.\\r\\nresult = false)'],'eModelElement':'isPositive'}}" 
},{
	 "id": "11", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oBpdf96tEei97MD7GK1RmA', 'key':'documentation','value':'The query isPositive() tells whether an integer expression has a positive value.\\r\\nresult = false'}}" 
},{
	 "id": "12", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oBpdgd6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@7f2c346c (key: documentation, value: The query isNonNegative() tells whether an integer expression has a non-negative value.\\r\\nresult = false)'],'eModelElement':'isNonNegative'}}" 
},{
	 "id": "13", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oBpdgt6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isNonNegative() tells whether an integer expression has a non-negative value.\\r\\nresult = false'}}" 
},{
	 "id": "14", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oBpeGt6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@77404a67 (key: documentation, value: The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.\\r\\nresult = upperBound() > 1)'],'eModelElement':'isMultivalued'}}" 
},{
	 "id": "15", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oBpeG96tEei97MD7GK1RmA', 'key':'documentation','value':'The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.\\r\\nresult = upperBound() > 1'}}" 
},{
	 "id": "16", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oBpeHd6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@27b8d00b (key: documentation, value: The query includesCardinality() checks whether the specified cardinality is valid for this multiplicity.\\r\\nresult = (lowerBound() <= C) and (upperBound() >= C))'],'eModelElement':'includesCardinality'}}" 
},{
	 "id": "17", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oBpeHt6tEei97MD7GK1RmA', 'key':'documentation','value':'The query includesCardinality() checks whether the specified cardinality is valid for this multiplicity.\\r\\nresult = (lowerBound() <= C) and (upperBound() >= C)'}}" 
},{
	 "id": "18", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oBpeId6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@2a2935a5 (key: documentation, value: The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.\\r\\nresult = (self.lowerBound() <= M.lowerBound()) and (self.upperBound() >= M.upperBound()))'],'eModelElement':'includesMultiplicity'}}" 
},{
	 "id": "19", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oBpeIt6tEei97MD7GK1RmA', 'key':'documentation','value':'The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.\\r\\nresult = (self.lowerBound() <= M.lowerBound()) and (self.upperB'}}" 
},{
	 "id": "20", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oBpee96tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@6bb3451e (key: documentation, value: The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent with a redefined property if the type of the redefining property conforms to the type of the redefined property, the multiplicity of the redefining property (if specified) is contained in the multiplicity of the redefined property, and the redefining property is derived if the redefined property is derived.\\r\\nThe query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent with a redefined property if the type of the redefining property conforms to the type of the redefined property, the multiplicity of the redefining property (if specified) is contained in the multiplicity of the redefined property, and the redefining property is derived if the redefined attribute is property.\\r\\nresult = redefinee.oclIsKindOf(Property) and \\n  let prop : Property = redefinee.oclAsType(Property) in \\n  (prop.type.conformsTo(self.type) and \\n  ((prop.lowerBound()->notEmpty() and self.lowerBound()->notEmpty()) implies prop.lowerBound() >= self.lowerBound()) and \\n  ((prop.upperBound()->notEmpty() and self.upperBound()->notEmpty()) implies prop.lowerBound() <= self.lowerBound()) and \\n  (self.isDerived implies prop.isDerived) and\\n  (self.isComposite implies prop.isComposite)))'],'eModelElement':'isConsistentWith'}}" 
},{
	 "id": "21", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oBpefN6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent w'}}" 
},{
	 "id": "22", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oBpfmN6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@8f01d23 (key: documentation, value: The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent in the sense of maintaining type covariance. Other senses of consistency may be required, for example to determine consistency in the sense of contravariance. Users may define alternative queries under names different from 'isConsistentWith()', as for example, users may define a query named 'isContravariantWith()'.\\r\\nThe query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining operation is consistent with a redefined operation if it has the same number of owned parameters, and the type of each owned parameter conforms to the type of the corresponding redefined parameter. \\r\\nresult = (redefinee.oclIsKindOf(Operation) and\\nlet op: Operation = redefinee.oclAsType(Operation) in\\nself.ownedParameter.size() = op.ownedParameter.size() and\\nforAll(i | op.ownedParameter[i].type.conformsTo(self.ownedParameter[i].type))\\n))'],'eModelElement':'isConsistentWith'}}" 
},{
	 "id": "23", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oBpfmd6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent in the sense of maintaining type covariance. Oth'}}" 
},{
	 "id": "24", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oBph4t6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@31b42400 (key: documentation, value: The query isConsistentWith() specifies that a redefining transition is consistent with a redefined transition provided that the redefining transition has the following relation to the redefined transition: A redefining transition redefines all properties of the corresponding redefined transition, except the source state and the trigger.\\r\\nredefinee.isRedefinitionContextValid(self))'],'eModelElement':'isConsistentWith'}}" 
},{
	 "id": "25", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oBph496tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies that a redefining transition is consistent with a redefined transition provided that the redefining transition has the following relation to the redefined transi'}}" 
},{
	 "id": "26", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oBpmB96tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@3aa44d07 (key: documentation, value: The query isConsistentWith() specifies, for any two RedefinableTemplateSignatures in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining template signature is always consistent with a redefined template signature, since redefinition only adds new formal parameters.\\r\\nresult = redefinee.oclIsKindOf(RedefineableTemplateSignature))'],'eModelElement':'isConsistentWith'}}" 
},{
	 "id": "27", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oBpmCN6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies, for any two RedefinableTemplateSignatures in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining templ'}}" 
},{
	 "id": "28", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oMO5hd6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@2ebe1fd9 (key: documentation, value: The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible.\\r\\nself.member->includes(el)\\r\\nresult = (ownedMember->includes(el)) or\\n(elementImport->select(ei|ei.importedElement = #public)->collect(ei|ei.importedElement)->includes(el)) or\\n(packageImport->select(pi|pi.visibility = #public)->collect(pi|pi.importedPackage.member->includes(el))->notEmpty()))'],'eModelElement':'makesVisible'}}" 
},{
	 "id": "29", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oMO5ht6tEei97MD7GK1RmA', 'key':'documentation','value':'The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible.\\r\\nself.member->includes(el)'}}" 
},{
	 "id": "30", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oMO7id6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@60a25346 (key: documentation, value: The query inheritableMembers() gives all of the members of a classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.\\r\\nc.allParents()->includes(self)\\r\\nresult = member->select(m | c.hasVisibilityOf(m)))'],'eModelElement':'inheritableMembers'}}" 
},{
	 "id": "31", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oMO7it6tEei97MD7GK1RmA', 'key':'documentation','value':'The query inheritableMembers() gives all of the members of a classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.\\r\\nc.allParents()->includes(se'}}" 
},{
	 "id": "32", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oMO7jd6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@6945b1f5 (key: documentation, value: The query hasVisibilityOf() determines whether a named element is visible in the classifier. By default all are visible. It is only called when the argument is something owned by a parent.\\r\\nself.allParents()->collect(c | c.member)->includes(n)\\r\\nresult = if (self.inheritedMember->includes(n)) then (n.visibility <> #private) else true)'],'eModelElement':'hasVisibilityOf'}}" 
},{
	 "id": "33", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oMO7jt6tEei97MD7GK1RmA', 'key':'documentation','value':'The query hasVisibilityOf() determines whether a named element is visible in the classifier. By default all are visible. It is only called when the argument is something owned by a parent.\\r\\nself.allPa'}}" 
},{
	 "id": "34", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oMPf7t6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@35e6b660 (key: documentation, value: The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions.\\r\\nredefinee.isRedefinitionContextValid(self)\\r\\nresult = false)'],'eModelElement':'isConsistentWith'}}" 
},{
	 "id": "35", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oMPf796tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; t'}}" 
},{
	 "id": "36", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oMPhAN6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@67194d70 (key: documentation, value: The query value() gives an integer value for an expression intended to produce one.\\r\\nself.isIntegral()\\r\\ntrue)'],'eModelElement':'value'}}" 
},{
	 "id": "37", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oMPhAd6tEei97MD7GK1RmA', 'key':'documentation','value':'The query value() gives an integer value for an expression intended to produce one.\\r\\nself.isIntegral()\\r\\ntrue'}}" 
},{
	 "id": "38", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oMPhBt6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@77ceaafa (key: documentation, value: The query isPositive() tells whether an integer expression has a positive value.\\r\\nself.isIntegral()\\r\\nresult = false)'],'eModelElement':'isPositive'}}" 
},{
	 "id": "39", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oMPhB96tEei97MD7GK1RmA', 'key':'documentation','value':'The query isPositive() tells whether an integer expression has a positive value.\\r\\nself.isIntegral()\\r\\nresult = false'}}" 
},{
	 "id": "40", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oMPhCd6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@4ae2ab79 (key: documentation, value: The query isNonNegative() tells whether an integer expression has a non-negative value.\\r\\nself.isIntegral()\\r\\nresult = false)'],'eModelElement':'isNonNegative'}}" 
},{
	 "id": "41", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oMPhCt6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isNonNegative() tells whether an integer expression has a non-negative value.\\r\\nself.isIntegral()\\r\\nresult = false'}}" 
},{
	 "id": "42", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oMPhot6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@368be173 (key: documentation, value: The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.\\r\\nupperBound()->notEmpty()\\r\\nresult = upperBound() > 1)'],'eModelElement':'isMultivalued'}}" 
},{
	 "id": "43", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oMPho96tEei97MD7GK1RmA', 'key':'documentation','value':'The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.\\r\\nupperBound()->notEmpty()\\r\\nresult = upperBound() > 1'}}" 
},{
	 "id": "44", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oMPhpd6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@173cad04 (key: documentation, value: The query includesCardinality() checks whether the specified cardinality is valid for this multiplicity.\\r\\nupperBound()->notEmpty() and lowerBound()->notEmpty()\\r\\nresult = (lowerBound() <= C) and (upperBound() >= C))'],'eModelElement':'includesCardinality'}}" 
},{
	 "id": "45", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oMPhpt6tEei97MD7GK1RmA', 'key':'documentation','value':'The query includesCardinality() checks whether the specified cardinality is valid for this multiplicity.\\r\\nupperBound()->notEmpty() and lowerBound()->notEmpty()\\r\\nresult = (lowerBound() <= C) and (upper'}}" 
},{
	 "id": "46", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oMPhqd6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@15bff165 (key: documentation, value: The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.\\r\\nself.upperBound()->notEmpty() and self.lowerBound()->notEmpty() and M.upperBound()->notEmpty() and M.lowerBound()->notEmpty()\\r\\nresult = (self.lowerBound() <= M.lowerBound()) and (self.upperBound() >= M.upperBound()))'],'eModelElement':'includesMultiplicity'}}" 
},{
	 "id": "47", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oMPhqt6tEei97MD7GK1RmA', 'key':'documentation','value':'The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.\\r\\nself.upperBound()->notEmpty() and self.lowerBound()->notEmpty()'}}" 
},{
	 "id": "48", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oMPiA96tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@68fcd2fa (key: documentation, value: The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent with a redefined property if the type of the redefining property conforms to the type of the redefined property, the multiplicity of the redefining property (if specified) is contained in the multiplicity of the redefined property, and the redefining property is derived if the redefined property is derived.\\r\\nThe query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent with a redefined property if the type of the redefining property conforms to the type of the redefined property, the multiplicity of the redefining property (if specified) is contained in the multiplicity of the redefined property, and the redefining property is derived if the redefined attribute is property.\\r\\nredefinee.isRedefinitionContextValid(self)\\r\\nresult = redefinee.oclIsKindOf(Property) and \\n  let prop : Property = redefinee.oclAsType(Property) in \\n  (prop.type.conformsTo(self.type) and \\n  ((prop.lowerBound()->notEmpty() and self.lowerBound()->notEmpty()) implies prop.lowerBound() >= self.lowerBound()) and \\n  ((prop.upperBound()->notEmpty() and self.upperBound()->notEmpty()) implies prop.lowerBound() <= self.lowerBound()) and \\n  (self.isDerived implies prop.isDerived) and\\n  (self.isComposite implies prop.isComposite)))'],'eModelElement':'isConsistentWith'}}" 
},{
	 "id": "49", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oMPiBN6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent w'}}" 
},{
	 "id": "50", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oMPjIN6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@17f53ab3 (key: documentation, value: The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent in the sense of maintaining type covariance. Other senses of consistency may be required, for example to determine consistency in the sense of contravariance. Users may define alternative queries under names different from 'isConsistentWith()', as for example, users may define a query named 'isContravariantWith()'.\\r\\nThe query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining operation is consistent with a redefined operation if it has the same number of owned parameters, and the type of each owned parameter conforms to the type of the corresponding redefined parameter. \\r\\nredefinee.isRedefinitionContextValid(self)\\r\\nresult = (redefinee.oclIsKindOf(Operation) and\\nlet op: Operation = redefinee.oclAsType(Operation) in\\nself.ownedParameter.size() = op.ownedParameter.size() and\\nforAll(i | op.ownedParameter[i].type.conformsTo(self.ownedParameter[i].type))\\n))'],'eModelElement':'isConsistentWith'}}" 
},{
	 "id": "51", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oMPjId6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent in the sense of maintaining type covariance. Oth'}}" 
},{
	 "id": "52", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oMPlat6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@5cf60070 (key: documentation, value: The query isConsistentWith() specifies that a redefining transition is consistent with a redefined transition provided that the redefining transition has the following relation to the redefined transition: A redefining transition redefines all properties of the corresponding redefined transition, except the source state and the trigger.\\r\\nresult = (redefinee.oclIsKindOf(Transition) and\\r\\n  let trans: Transition = redefinee.oclAsType(Transition) in\\r\\n    (source() = trans.source() and trigger() = tran.trigger())\\r\\nredefinee.isRedefinitionContextValid(self))'],'eModelElement':'isConsistentWith'}}" 
},{
	 "id": "53", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oMPla96tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies that a redefining transition is consistent with a redefined transition provided that the redefining transition has the following relation to the redefined transi'}}" 
},{
	 "id": "54", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_oMQKuN6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@60f392a3 (key: documentation, value: The query isConsistentWith() specifies, for any two RedefinableTemplateSignatures in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining template signature is always consistent with a redefined template signature, since redefinition only adds new formal parameters.\\r\\nredefinee.isRedefinitionContextValid(self)\\r\\nresult = redefinee.oclIsKindOf(RedefineableTemplateSignature))'],'eModelElement':'isConsistentWith'}}" 
},{
	 "id": "55", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_oMQKud6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies, for any two RedefinableTemplateSignatures in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining templ'}}" 
},{
	 "id": "56", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_ftf2mt6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@36c6395c (source: http://www.eclipse.org/emf/2002/GenModel)'],'name':'includesMultiplicity','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'Boolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@17430a69 (expression: Boolean)','eContainingClass':'MultiplicityElement','eParameters':['M']}}" 
},{
	 "id": "57", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_ftf18d6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@725a6599 (source: http://www.eclipse.org/emf/2002/GenModel)'],'name':'isPositive','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'Boolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@477d3dee (expression: Boolean)','eContainingClass':'OpaqueExpression'}}" 
},{
	 "id": "58", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_ftgZwN6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@2b83de7a (source: http://www.eclipse.org/emf/2002/GenModel)','org.eclipse.emf.ecore.impl.EAnnotationImpl@5285c166 (source: redefines)'],'name':'isConsistentWith','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'Boolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@3efc70ec (expression: Boolean)','eParameters':['redefinee']}}" 
},{
	 "id": "59", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_ftf0Qd6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@22ce417f (source: http://www.eclipse.org/emf/2002/GenModel)'],'name':'hasVisibilityOf','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'Boolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@51cc0b (expression: Boolean)','eContainingClass':'Classifier','eParameters':['n']}}" 
},{
	 "id": "60", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_ftf3AN6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@5c9643e8 (source: http://www.eclipse.org/emf/2002/GenModel)','org.eclipse.emf.ecore.impl.EAnnotationImpl@2cebdc98 (source: redefines)'],'name':'isConsistentWith','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'Boolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@6069d0d1 (expression: Boolean)','eParameters':['redefinee']}}" 
},{
	 "id": "61", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_ftf0O96tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@73355502 (source: http://www.eclipse.org/emf/2002/GenModel)'],'name':'inheritableMembers','ordered':'false','unique':'true','lowerBound':'0','upperBound':'-1','many':'true','required':'false','eType':'NamedElement','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@27f7219f (expression: NamedElement)','eContainingClass':'Classifier','eParameters':['c']}}" 
},{
	 "id": "62", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_ftf0st6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@59d09717 (source: http://www.eclipse.org/emf/2002/GenModel)'],'name':'isConsistentWith','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'Boolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@65ba8f6f (expression: Boolean)','eContainingClass':'RedefinableElement','eParameters':['redefinee']}}" 
},{
	 "id": "63", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_ftgb-d6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@2cf0ccde (source: http://www.eclipse.org/emf/2002/GenModel)','org.eclipse.emf.ecore.impl.EAnnotationImpl@571968c4 (source: redefines)'],'name':'isConsistentWith','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'Boolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@72e81c79 (expression: Boolean)','eParameters':['redefinee']}}" 
},{
	 "id": "64", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_ftf15d6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@2cbc7c1c (source: http://www.eclipse.org/emf/2002/GenModel)'],'name':'value','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'Integer','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@57a92b0 (expression: Integer)','eContainingClass':'OpaqueExpression'}}" 
},{
	 "id": "65", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_ftf1996tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@11a9cdbb (source: http://www.eclipse.org/emf/2002/GenModel)'],'name':'isNonNegative','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'Boolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@307e0080 (expression: Boolean)','eContainingClass':'OpaqueExpression'}}" 
},{
	 "id": "66", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_ftfzH96tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@347e122 (source: http://www.eclipse.org/emf/2002/GenModel)'],'name':'makesVisible','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'Boolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@c1761ef (expression: Boolean)','eContainingClass':'Package','eParameters':['el']}}" 
},{
	 "id": "67", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_ftf2jN6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@440bcc5a (source: http://www.eclipse.org/emf/2002/GenModel)'],'name':'isMultivalued','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'Boolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@5021dd43 (expression: Boolean)','eContainingClass':'MultiplicityElement'}}" 
},{
	 "id": "68", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_h1rEzd6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@525eab55 (source: http://www.eclipse.org/emf/2002/GenModel)'],'name':'includesCardinality','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'Boolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@482dc716 (expression: Boolean)','eContainingClass':'MultiplicityElement','eParameters':['C']}}" 
},{
	 "id": "69", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_fthAp96tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@1e70d243 (source: http://www.eclipse.org/emf/2002/GenModel)','org.eclipse.emf.ecore.impl.EAnnotationImpl@39d98794 (source: redefines)'],'name':'isConsistentWith','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'Boolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@7663bdae (expression: Boolean)','eParameters':['redefinee']}}" 
}], 
 "links": [{
	 "source": "0", 
	 "target": "1", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "2", 
	 "target": "3", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "4", 
	 "target": "5", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "6", 
	 "target": "7", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "8", 
	 "target": "9", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "10", 
	 "target": "11", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "12", 
	 "target": "13", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "14", 
	 "target": "15", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "16", 
	 "target": "17", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "18", 
	 "target": "19", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "20", 
	 "target": "21", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "22", 
	 "target": "23", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "24", 
	 "target": "25", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "26", 
	 "target": "27", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "28", 
	 "target": "29", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "30", 
	 "target": "31", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "32", 
	 "target": "33", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "34", 
	 "target": "35", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "36", 
	 "target": "37", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "38", 
	 "target": "39", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "40", 
	 "target": "41", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "42", 
	 "target": "43", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "44", 
	 "target": "45", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "46", 
	 "target": "47", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "48", 
	 "target": "49", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "50", 
	 "target": "51", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "52", 
	 "target": "53", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "54", 
	 "target": "55", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "56", 
	 "target": "18", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "56", 
	 "target": "46", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "57", 
	 "target": "10", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "57", 
	 "target": "38", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "58", 
	 "target": "22", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "58", 
	 "target": "50", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "59", 
	 "target": "4", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "59", 
	 "target": "32", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "60", 
	 "target": "20", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "60", 
	 "target": "48", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "61", 
	 "target": "2", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "61", 
	 "target": "30", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "62", 
	 "target": "6", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "62", 
	 "target": "34", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "63", 
	 "target": "24", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "63", 
	 "target": "52", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "64", 
	 "target": "8", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "64", 
	 "target": "36", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "65", 
	 "target": "12", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "65", 
	 "target": "40", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "66", 
	 "target": "0", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "66", 
	 "target": "28", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "67", 
	 "target": "14", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "67", 
	 "target": "42", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "68", 
	 "target": "16", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "68", 
	 "target": "44", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "69", 
	 "target": "26", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "69", 
	 "target": "54", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
}]}