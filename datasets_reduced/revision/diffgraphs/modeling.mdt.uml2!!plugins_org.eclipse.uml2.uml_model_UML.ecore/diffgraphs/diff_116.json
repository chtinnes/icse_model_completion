{"directed": true, "multigraph": false, "graph": {}, 
  "nodes": [{
	 "id": "0", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_1u0e3t6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@41b0f3b9 (key: documentation, value: The query isPositive() tells whether an integer expression has a positive value.\\nresult = (false)\\nself.isIntegral()\\n<p>From package UML::Values.</p>)'],'eModelElement':'isPositive'}}" 
},{
	 "id": "1", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_1u0e396tEei97MD7GK1RmA', 'key':'documentation','value':'The query isPositive() tells whether an integer expression has a positive value.\\nresult = (false)\\nself.isIntegral()\\n<p>From package UML::Values.</p>'}}" 
},{
	 "id": "2", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_1u0fyd6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@1d2c2274 (key: documentation, value: The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent. A redefining operation is consistent with a redefined operation if\\r\\nit has the same number of owned parameters, and for each parameter the following holds:\\r\\n\\r\\n- Direction, ordering and uniqueness are the same.\\r\\n- The corresponding types are covariant, contravariant or invariant.\\r\\n- The multiplicities are compatible, depending on the parameter direction.\\nresult = (redefiningElement.oclIsKindOf(Operation) and\\r\\nlet op : Operation = redefiningElement.oclAsType(Operation) in\\r\\n\\tself.ownedParameter->size() = op.ownedParameter->size() and\\r\\n\\tSequence{1..self.ownedParameter->size()}->\\r\\n\\t\\tforAll(i |  \\r\\n\\t\\t  let redefiningParam : Parameter = op.ownedParameter->at(i),\\r\\n               redefinedParam : Parameter = self.ownedParameter->at(i) in\\r\\n                 (redefiningParam.isUnique = redefinedParam.isUnique) and\\r\\n                 (redefiningParam.isOrdered = redefinedParam. isOrdered) and\\r\\n                 (redefiningParam.direction = redefinedParam.direction) and\\r\\n                 (redefiningParam.type.conformsTo(redefinedParam.type) or\\r\\n                     redefinedParam.type.conformsTo(redefiningParam.type)) and\\r\\n                 (redefiningParam.direction = ParameterDirectionKind::inout implies\\r\\n                         (redefinedParam.compatibleWith(redefiningParam) and\\r\\n                         redefiningParam.compatibleWith(redefinedParam))) and\\r\\n                 (redefiningParam.direction = ParameterDirectionKind::_'in' implies\\r\\n                         redefinedParam.compatibleWith(redefiningParam)) and\\r\\n                 ((redefiningParam.direction = ParameterDirectionKind::out or\\r\\n                      redefiningParam.direction = ParameterDirectionKind::return) implies\\r\\n                         redefiningParam.compatibleWith(redefinedParam))\\r\\n\\t\\t))\\nredefiningElement.isRedefinitionContextValid(self)\\n<p>From package UML::Classification.</p>)'],'eModelElement':'isConsistentWith'}}" 
},{
	 "id": "3", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_1u0fyt6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent. A redefining operation is consistent with a red'}}" 
},{
	 "id": "4", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_1u0gyt6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@2bff3905 (key: documentation, value: The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions.\\nresult = (false)\\nredefiningElement.isRedefinitionContextValid(self)\\n<p>From package UML::Classification.</p>)'],'eModelElement':'isConsistentWith'}}" 
},{
	 "id": "5", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_1u0gy96tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; t'}}" 
},{
	 "id": "6", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_1u0jat6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@2b958b74 (key: documentation, value: The query isConsistentWith() specifies that a redefining Region is consistent with a redefined Region provided that the redefining Region is an extension of the Redefined region, i.e., its Vertices and Transitions conform to one of the following: (1) they are equal to corresponding elements of the redefined Region or, (2) they consistently redefine a State or Transition of the redefined region, or (3) they add new States or Transitions.\\nresult = (-- the following is merely a default body; it is expected that the specific form of this constraint will be specified by profiles\\r\\ntrue)\\nredefiningElement.isRedefinitionContextValid(self)\\n<p>From package UML::StateMachines.</p>)'],'eModelElement':'isConsistentWith'}}" 
},{
	 "id": "7", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_1u0ja96tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies that a redefining Region is consistent with a redefined Region provided that the redefining Region is an extension of the Redefined region, i.e., its Vertices an'}}" 
},{
	 "id": "8", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_1u0j296tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@535f3303 (key: documentation, value: The query isConsistentWith() specifies that a redefining State is consistent with a redefined State provided that the redefining State is an extension of the redefined State A simple State can be redefined (extended) to become a composite State (by adding one or more Regions) and a composite State can be redefined (extended) by adding Regions and by adding Vertices, States, and Transitions to inherited Regions. All States may add or replace entry, exit, and 'doActivity' Behaviors.\\nresult = (-- the following is merely a default body; it is expected that the specific form of this constraint will be specified by profiles\\r\\ntrue)\\nredefiningElement.isRedefinitionContextValid(self)\\n<p>From package UML::StateMachines.</p>)'],'eModelElement':'isConsistentWith'}}" 
},{
	 "id": "9", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_1u0j3N6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies that a redefining State is consistent with a redefined State provided that the redefining State is an extension of the redefined State A simple State can be rede'}}" 
},{
	 "id": "10", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_1u0lGd6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@4f58f366 (key: documentation, value: The query isConsistentWith() specifies that a redefining Transition is consistent with a redefined Transition provided that the redefining Transition has the following relation to the redefined Transition: A redefining Transition redefines all properties of the corresponding redefined Transition except the source State and the Trigger.\\nresult = (-- the following is merely a default body; it is expected that the specific form of this constraint will be specified by profiles\\r\\ntrue)\\nredefiningElement.isRedefinitionContextValid(self)\\n<p>From package UML::StateMachines.</p>)'],'eModelElement':'isConsistentWith'}}" 
},{
	 "id": "11", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_1u0lGt6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies that a redefining Transition is consistent with a redefined Transition provided that the redefining Transition has the following relation to the redefined Transi'}}" 
},{
	 "id": "12", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_1u0owd6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@4b262447 (key: documentation, value: The query isConsistentWith() specifies, for any two RedefinableTemplateSignatures in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining template signature is always consistent with a redefined template signature, as redefinition only adds new formal parameters.\\nresult = (redefiningElement.oclIsKindOf(RedefinableTemplateSignature))\\nredefiningElement.isRedefinitionContextValid(self)\\n<p>From package UML::Classification.</p>)'],'eModelElement':'isConsistentWith'}}" 
},{
	 "id": "13", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_1u0owt6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies, for any two RedefinableTemplateSignatures in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining templ'}}" 
},{
	 "id": "14", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_2ZAHqt6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@57bbeea4 (key: documentation, value: This query returns a set including the MessageEnd (if exists) at the opposite end of the Message for this MessageEnd.\\nresult = (message->asSet().messageEnd->asSet()->excluding(self))\\nmessage->notEmpty()\\n<p>From package UML::Interactions.</p>)'],'eModelElement':'oppositeEnd'}}" 
},{
	 "id": "15", 
	 "label": "{'changeType': 'Remove', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_2ZAHq96tEei97MD7GK1RmA', 'key':'documentation','value':'This query returns a set including the MessageEnd (if exists) at the opposite end of the Message for this MessageEnd.\\nresult = (message->asSet().messageEnd->asSet()->excluding(self))\\nmessage->notEmpty'}}" 
},{
	 "id": "16", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_4pe5Yd6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@512eac44 (key: documentation, value: The query isPositive() tells whether an integer expression has a positive value.\\nself.isIntegral()\\nresult = (false)\\n<p>From package UML::Values.</p>)'],'eModelElement':'isPositive'}}" 
},{
	 "id": "17", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_4pe5Yt6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isPositive() tells whether an integer expression has a positive value.\\nself.isIntegral()\\nresult = (false)\\n<p>From package UML::Values.</p>'}}" 
},{
	 "id": "18", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_4pe6UN6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@126261bf (key: documentation, value: The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent. A redefining operation is consistent with a redefined operation if\\r\\nit has the same number of owned parameters, and for each parameter the following holds:\\r\\n\\r\\n- Direction, ordering and uniqueness are the same.\\r\\n- The corresponding types are covariant, contravariant or invariant.\\r\\n- The multiplicities are compatible, depending on the parameter direction.\\nredefiningElement.isRedefinitionContextValid(self)\\nresult = (redefiningElement.oclIsKindOf(Operation) and\\r\\nlet op : Operation = redefiningElement.oclAsType(Operation) in\\r\\n\\tself.ownedParameter->size() = op.ownedParameter->size() and\\r\\n\\tSequence{1..self.ownedParameter->size()}->\\r\\n\\t\\tforAll(i |  \\r\\n\\t\\t  let redefiningParam : Parameter = op.ownedParameter->at(i),\\r\\n               redefinedParam : Parameter = self.ownedParameter->at(i) in\\r\\n                 (redefiningParam.isUnique = redefinedParam.isUnique) and\\r\\n                 (redefiningParam.isOrdered = redefinedParam. isOrdered) and\\r\\n                 (redefiningParam.direction = redefinedParam.direction) and\\r\\n                 (redefiningParam.type.conformsTo(redefinedParam.type) or\\r\\n                     redefinedParam.type.conformsTo(redefiningParam.type)) and\\r\\n                 (redefiningParam.direction = ParameterDirectionKind::inout implies\\r\\n                         (redefinedParam.compatibleWith(redefiningParam) and\\r\\n                         redefiningParam.compatibleWith(redefinedParam))) and\\r\\n                 (redefiningParam.direction = ParameterDirectionKind::_'in' implies\\r\\n                         redefinedParam.compatibleWith(redefiningParam)) and\\r\\n                 ((redefiningParam.direction = ParameterDirectionKind::out or\\r\\n                      redefiningParam.direction = ParameterDirectionKind::return) implies\\r\\n                         redefiningParam.compatibleWith(redefinedParam))\\r\\n\\t\\t))\\n<p>From package UML::Classification.</p>)'],'eModelElement':'isConsistentWith'}}" 
},{
	 "id": "19", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_4pe6Ud6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent. A redefining operation is consistent with a red'}}" 
},{
	 "id": "20", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_4pe7V96tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@38f8cae7 (key: documentation, value: The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions.\\nredefiningElement.isRedefinitionContextValid(self)\\nresult = (false)\\n<p>From package UML::Classification.</p>)'],'eModelElement':'isConsistentWith'}}" 
},{
	 "id": "21", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_4pe7WN6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; t'}}" 
},{
	 "id": "22", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_4pn5R96tEei97MD7GK1RmA', 'source':'subsets','eModelElement':'extendedStateMachine','references':['redefinedClassifier']}}" 
},{
	 "id": "23", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EReference', 'attributes': {'id': '_ftf0dd6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@2ff61e15 (source: http://www.eclipse.org/emf/2002/GenModel)','org.eclipse.emf.ecore.impl.EAnnotationImpl@14dc922d (source: subsets)'],'name':'redefinedClassifier','ordered':'false','unique':'true','lowerBound':'0','upperBound':'-1','many':'true','required':'false','eType':'Classifier','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@2b2e8045 (expression: Classifier)','changeable':'true','volatile':'false','transient':'false','unsettable':'false','derived':'false','eContainingClass':'Classifier','containment':'false','container':'false','resolveProxies':'true','eReferenceType':'Classifier'}}" 
},{
	 "id": "24", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_4pn6At6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@7ac445ff (key: documentation, value: The query isConsistentWith() specifies that a redefining Region is consistent with a redefined Region provided that the redefining Region is an extension of the Redefined region, i.e., its Vertices and Transitions conform to one of the following: (1) they are equal to corresponding elements of the redefined Region or, (2) they consistently redefine a State or Transition of the redefined region, or (3) they add new States or Transitions.\\nredefiningElement.isRedefinitionContextValid(self)\\nresult = (-- the following is merely a default body; it is expected that the specific form of this constraint will be specified by profiles\\r\\ntrue)\\n<p>From package UML::StateMachines.</p>)'],'eModelElement':'isConsistentWith'}}" 
},{
	 "id": "25", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_4pn6A96tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies that a redefining Region is consistent with a redefined Region provided that the redefining Region is an extension of the Redefined region, i.e., its Vertices an'}}" 
},{
	 "id": "26", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_4pn6c96tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@72286392 (key: documentation, value: The query isConsistentWith() specifies that a redefining State is consistent with a redefined State provided that the redefining State is an extension of the redefined State A simple State can be redefined (extended) to become a composite State (by adding one or more Regions) and a composite State can be redefined (extended) by adding Regions and by adding Vertices, States, and Transitions to inherited Regions. All States may add or replace entry, exit, and 'doActivity' Behaviors.\\nredefiningElement.isRedefinitionContextValid(self)\\nresult = (-- the following is merely a default body; it is expected that the specific form of this constraint will be specified by profiles\\r\\ntrue)\\n<p>From package UML::StateMachines.</p>)'],'eModelElement':'isConsistentWith'}}" 
},{
	 "id": "27", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_4pn6dN6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies that a redefining State is consistent with a redefined State provided that the redefining State is an extension of the redefined State A simple State can be rede'}}" 
},{
	 "id": "28", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_4pn7td6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@1849dff2 (key: documentation, value: The query isConsistentWith() specifies that a redefining Transition is consistent with a redefined Transition provided that the redefining Transition has the following relation to the redefined Transition: A redefining Transition redefines all properties of the corresponding redefined Transition except the source State and the Trigger.\\nredefiningElement.isRedefinitionContextValid(self)\\nresult = (-- the following is merely a default body; it is expected that the specific form of this constraint will be specified by profiles\\r\\ntrue)\\n<p>From package UML::StateMachines.</p>)'],'eModelElement':'isConsistentWith'}}" 
},{
	 "id": "29", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_4pn7tt6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies that a redefining Transition is consistent with a redefined Transition provided that the redefining Transition has the following relation to the redefined Transi'}}" 
},{
	 "id": "30", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_4pn_Zd6tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@5e79a029 (key: documentation, value: The query isConsistentWith() specifies, for any two RedefinableTemplateSignatures in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining template signature is always consistent with a redefined template signature, as redefinition only adds new formal parameters.\\nredefiningElement.isRedefinitionContextValid(self)\\nresult = (redefiningElement.oclIsKindOf(RedefinableTemplateSignature))\\n<p>From package UML::Classification.</p>)'],'eModelElement':'isConsistentWith'}}" 
},{
	 "id": "31", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_4pn_Zt6tEei97MD7GK1RmA', 'key':'documentation','value':'The query isConsistentWith() specifies, for any two RedefinableTemplateSignatures in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining templ'}}" 
},{
	 "id": "32", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EAnnotation', 'attributes': {'id': '_4poTi96tEei97MD7GK1RmA', 'source':'http://www.eclipse.org/emf/2002/GenModel','details':['org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl@467854de (key: documentation, value: This query returns a set including the MessageEnd (if exists) at the opposite end of the Message for this MessageEnd.\\nmessage->notEmpty()\\nresult = (message->asSet().messageEnd->asSet()->excluding(self))\\n<p>From package UML::Interactions.</p>)'],'eModelElement':'oppositeEnd'}}" 
},{
	 "id": "33", 
	 "label": "{'changeType': 'Add', 'type': 'object', 'className': 'EStringToStringMapEntry', 'attributes': {'id': '_4poTjN6tEei97MD7GK1RmA', 'key':'documentation','value':'This query returns a set including the MessageEnd (if exists) at the opposite end of the Message for this MessageEnd.\\nmessage->notEmpty()\\nresult = (message->asSet().messageEnd->asSet()->excluding(self'}}" 
},{
	 "id": "34", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_ftf18d6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@1f395c5 (source: http://www.eclipse.org/emf/2002/GenModel)'],'name':'isPositive','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'Boolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@55ec3d0b (expression: Boolean)','eContainingClass':'OpaqueExpression'}}" 
},{
	 "id": "35", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_ftgbmN6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@43154979 (source: http://www.eclipse.org/emf/2002/GenModel)','org.eclipse.emf.ecore.impl.EAnnotationImpl@6220b63f (source: redefines)'],'name':'isConsistentWith','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'Boolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@4a87ecfb (expression: Boolean)','eParameters':['redefiningElement']}}" 
},{
	 "id": "36", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_ftgZwN6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@3c68c116 (source: http://www.eclipse.org/emf/2002/GenModel)','org.eclipse.emf.ecore.impl.EAnnotationImpl@1dcb870c (source: redefines)'],'name':'isConsistentWith','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'Boolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@58ecb1dd (expression: Boolean)','eParameters':['redefiningElement']}}" 
},{
	 "id": "37", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_ftf0st6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@489e7a8b (source: http://www.eclipse.org/emf/2002/GenModel)'],'name':'isConsistentWith','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'Boolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@71fcdc86 (expression: Boolean)','eContainingClass':'RedefinableElement','eParameters':['redefiningElement']}}" 
},{
	 "id": "38", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_ftgb-d6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@4a8d7f9a (source: http://www.eclipse.org/emf/2002/GenModel)','org.eclipse.emf.ecore.impl.EAnnotationImpl@29032714 (source: redefines)'],'name':'isConsistentWith','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'Boolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@52fd0b07 (expression: Boolean)','eParameters':['redefiningElement']}}" 
},{
	 "id": "39", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_1u9ib96tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@3bf48393 (source: http://www.eclipse.org/emf/2002/GenModel)'],'name':'oppositeEnd','ordered':'false','unique':'true','lowerBound':'0','upperBound':'-1','many':'true','required':'false','eType':'MessageEnd','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@578a10bc (expression: MessageEnd)','eContainingClass':'MessageEnd'}}" 
},{
	 "id": "40", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EReference', 'attributes': {'id': '_ftgbid6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@2782b895 (source: http://www.eclipse.org/emf/2002/GenModel)','org.eclipse.emf.ecore.impl.EAnnotationImpl@596375cf (source: redefines)','org.eclipse.emf.ecore.impl.EAnnotationImpl@7032976d (source: subsets)'],'name':'extendedStateMachine','ordered':'false','unique':'true','lowerBound':'0','upperBound':'-1','many':'true','required':'false','eType':'StateMachine','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@a34798f (expression: StateMachine)','changeable':'true','volatile':'false','transient':'false','unsettable':'false','derived':'false','eContainingClass':'StateMachine','containment':'false','container':'false','resolveProxies':'true','eReferenceType':'StateMachine'}}" 
},{
	 "id": "41", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_fthAp96tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@67af8f66 (source: http://www.eclipse.org/emf/2002/GenModel)','org.eclipse.emf.ecore.impl.EAnnotationImpl@6c977652 (source: redefines)'],'name':'isConsistentWith','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'Boolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@47954268 (expression: Boolean)','eParameters':['redefiningElement']}}" 
},{
	 "id": "42", 
	 "label": "{'changeType': 'Preserve', 'type': 'object', 'className': 'EOperation', 'attributes': {'id': '_ftgcwd6tEei97MD7GK1RmA', 'eAnnotations':['org.eclipse.emf.ecore.impl.EAnnotationImpl@5b86a704 (source: http://www.eclipse.org/emf/2002/GenModel)','org.eclipse.emf.ecore.impl.EAnnotationImpl@89f065c (source: redefines)'],'name':'isConsistentWith','ordered':'false','unique':'true','lowerBound':'1','upperBound':'1','many':'false','required':'true','eType':'Boolean','eGenericType':'org.eclipse.emf.ecore.impl.EGenericTypeImpl@3dfe10d6 (expression: Boolean)','eParameters':['redefiningElement']}}" 
}], 
 "links": [{
	 "source": "0", 
	 "target": "1", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "2", 
	 "target": "3", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "4", 
	 "target": "5", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "6", 
	 "target": "7", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "8", 
	 "target": "9", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "10", 
	 "target": "11", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "12", 
	 "target": "13", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "14", 
	 "target": "15", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "16", 
	 "target": "17", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "18", 
	 "target": "19", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "20", 
	 "target": "21", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "22", 
	 "target": "23", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'references'}" 
},{
	 "source": "24", 
	 "target": "25", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "26", 
	 "target": "27", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "28", 
	 "target": "29", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "30", 
	 "target": "31", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "32", 
	 "target": "33", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'details'}" 
},{
	 "source": "34", 
	 "target": "0", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "34", 
	 "target": "16", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "35", 
	 "target": "6", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "35", 
	 "target": "24", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "36", 
	 "target": "2", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "36", 
	 "target": "18", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "37", 
	 "target": "4", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "37", 
	 "target": "20", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "38", 
	 "target": "10", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "38", 
	 "target": "28", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "39", 
	 "target": "14", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "39", 
	 "target": "32", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "40", 
	 "target": "22", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "41", 
	 "target": "12", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "41", 
	 "target": "30", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "42", 
	 "target": "8", 
	 "label": "{'changeType': 'Remove', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
},{
	 "source": "42", 
	 "target": "26", 
	 "label": "{'changeType': 'Add', 'type': 'reference', 'referenceTypeName': 'eAnnotations'}" 
}]}